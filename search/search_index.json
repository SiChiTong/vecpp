{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to VecPP Introduction Sections User guide for a guide on how to approach the library API Reference for a formal definition of the API Developer's guide if you want to make changes to VecPP Acknowledgements Documentation The structure of the API reference part of this documentation is heavly inspired by the excellenent cppreference.com","title":"Home"},{"location":"index.html#welcome-to-vecpp","text":"","title":"Welcome to VecPP"},{"location":"index.html#introduction","text":"","title":"Introduction"},{"location":"index.html#sections","text":"User guide for a guide on how to approach the library API Reference for a formal definition of the API Developer's guide if you want to make changes to VecPP","title":"Sections"},{"location":"index.html#acknowledgements","text":"","title":"Acknowledgements"},{"location":"index.html#documentation","text":"The structure of the API reference part of this documentation is heavly inspired by the excellenent cppreference.com","title":"Documentation"},{"location":"dev-guide/index.html","text":"Dev guide This part of the documentation is intended for people who want to contribute to VecPP. If you only want to use the library, you cansafely ignore everything in here. Coding style clang-format -style=file should be a no-op. If some local formatting would be objectively better (such as inlining a matrix constant), then turning off auto formatting is fine: // clang-format off ... // clang-format on Includes With the exception of vecpp/vecpp.h , includes are always in 3 sections: #include \"vecpp/config.h\" #include \"vecpp/...\" #include \"vecpp/...\" #include \"vecpp/...\" #include <system_header> #include <system_header> #include <system_header> Every immediate dependency needs to be included in each dependant file. General Guidance No macros unless necesary A good example of this is vec/operations_per_member.h . It would be tempting to make a DISPATCH_BINARY() macro to avoid repetition and prevent typos. However, such macros tend to confuse debuggers, and make it harder to follow the process. It also makes it hard to set breakpoints.","title":"Dev Guide"},{"location":"dev-guide/index.html#dev-guide","text":"This part of the documentation is intended for people who want to contribute to VecPP. If you only want to use the library, you cansafely ignore everything in here.","title":"Dev guide"},{"location":"dev-guide/index.html#coding-style","text":"clang-format -style=file should be a no-op. If some local formatting would be objectively better (such as inlining a matrix constant), then turning off auto formatting is fine: // clang-format off ... // clang-format on","title":"Coding style"},{"location":"dev-guide/index.html#includes","text":"With the exception of vecpp/vecpp.h , includes are always in 3 sections: #include \"vecpp/config.h\" #include \"vecpp/...\" #include \"vecpp/...\" #include \"vecpp/...\" #include <system_header> #include <system_header> #include <system_header> Every immediate dependency needs to be included in each dependant file.","title":"Includes"},{"location":"dev-guide/index.html#general-guidance","text":"","title":"General Guidance"},{"location":"dev-guide/index.html#no-macros-unless-necesary","text":"A good example of this is vec/operations_per_member.h . It would be tempting to make a DISPATCH_BINARY() macro to avoid repetition and prevent typos. However, such macros tend to confuse debuggers, and make it harder to follow the process. It also makes it hard to set breakpoints.","title":"No macros unless necesary"},{"location":"reference/index.html","text":"Reference Guide Angles Vector Matrices Cheat-Sheet No time to browse the API reference? Here's a quick reference to the most commonly used parts of the library. Types: How What Angle<T> An angle, stored as T Vec<T, N> A carthesian vector of length N , where each value is a T Mat<T, C, R> A CxR Matrix, where each cell is a T Quat<T> A quaternion, where each member is stored as a T Angles: How What Construction Angle<T>::from_deg(T) angle from degrees Angle<T>::from_rad(T) angle from radians Access angle.as_deg() get as degrees angle.as_rad() get as radians Trigonometry sin(Angle) sine cos(Angle) cosine tan(Angle) tangent Format ostream << Angle Print to stream Vectors: How What Construction Vec<T, N> v = {T, ...} Vec<T, N>{T, ...} Access vec.at(i) vec[i] for(auto v: vec) {} Operations norm(vec) normalize(vec) dot(vec) cross(vec, vec) Cross-product (only for Vec<T,3> ) Format ostream << vec Constants How What pi<Scalar> \u03c0 two_pi<Scalar> 2\u03c0 half_pi<Scalar> \u03c0/2","title":"Home"},{"location":"reference/index.html#reference-guide","text":"Angles Vector Matrices","title":"Reference Guide"},{"location":"reference/index.html#cheat-sheet","text":"No time to browse the API reference? Here's a quick reference to the most commonly used parts of the library.","title":"Cheat-Sheet"},{"location":"reference/index.html#types","text":"How What Angle<T> An angle, stored as T Vec<T, N> A carthesian vector of length N , where each value is a T Mat<T, C, R> A CxR Matrix, where each cell is a T Quat<T> A quaternion, where each member is stored as a T","title":"Types:"},{"location":"reference/index.html#angles","text":"How What Construction Angle<T>::from_deg(T) angle from degrees Angle<T>::from_rad(T) angle from radians Access angle.as_deg() get as degrees angle.as_rad() get as radians Trigonometry sin(Angle) sine cos(Angle) cosine tan(Angle) tangent Format ostream << Angle Print to stream","title":"Angles:"},{"location":"reference/index.html#vectors","text":"How What Construction Vec<T, N> v = {T, ...} Vec<T, N>{T, ...} Access vec.at(i) vec[i] for(auto v: vec) {} Operations norm(vec) normalize(vec) dot(vec) cross(vec, vec) Cross-product (only for Vec<T,3> ) Format ostream << vec","title":"Vectors:"},{"location":"reference/index.html#constants","text":"How What pi<Scalar> \u03c0 two_pi<Scalar> 2\u03c0 half_pi<Scalar> \u03c0/2","title":"Constants"},{"location":"reference/angle/index.html","text":"vecpp :: reference Angle template<typename T> struct Angle; Angle is a wrapper type around a representation that helps manage angles in a consistent manner. Angle values are always kepts within the ]-PI, PI] range at all times. Member types Member Type Definition value_type T Member functions Member Behavior (destructor) does nothing operator= ovewrite the angle with another angle from_deg new angle from a degree value from_rad new angle from a radian value as_deg get the angle value as radians as_rad get the angle value as degrees Non-member functions Language support Function Behavior operator<< print to stream Binary operations Function Behavior operator== compares two angles for equality operator!= compares two angles for inequality operator< compares two angles operator<= compares two angles operator> compares two angles operator>= compares two angles operator-= in-place diff angles operator+= in-place add angles operator- diff angles operator+ add angles operator*= in-place scale angle operator/= in-place scale angle operator* scale angle operator/ scale angle Unary operations Function Behavior operator- (unary) negation Trigonometric functions Function Behavior sin sine cos cosine tan tangent Advanced/unsafe functions Member Behavior raw gets the raw internal value of the angle from_clamped_deg unsafe new angle from a degree value from_clamped_rad unsafe new angle from a radian value","title":"Angle"},{"location":"reference/angle/index.html#angle","text":"template<typename T> struct Angle; Angle is a wrapper type around a representation that helps manage angles in a consistent manner. Angle values are always kepts within the ]-PI, PI] range at all times.","title":"Angle"},{"location":"reference/angle/index.html#member-types","text":"Member Type Definition value_type T","title":"Member types"},{"location":"reference/angle/index.html#member-functions","text":"Member Behavior (destructor) does nothing operator= ovewrite the angle with another angle from_deg new angle from a degree value from_rad new angle from a radian value as_deg get the angle value as radians as_rad get the angle value as degrees","title":"Member functions"},{"location":"reference/angle/index.html#non-member-functions","text":"","title":"Non-member functions"},{"location":"reference/angle/index.html#language-support","text":"Function Behavior operator<< print to stream","title":"Language support"},{"location":"reference/angle/index.html#binary-operations","text":"Function Behavior operator== compares two angles for equality operator!= compares two angles for inequality operator< compares two angles operator<= compares two angles operator> compares two angles operator>= compares two angles operator-= in-place diff angles operator+= in-place add angles operator- diff angles operator+ add angles operator*= in-place scale angle operator/= in-place scale angle operator* scale angle operator/ scale angle","title":"Binary operations"},{"location":"reference/angle/index.html#unary-operations","text":"Function Behavior operator- (unary) negation","title":"Unary operations"},{"location":"reference/angle/index.html#trigonometric-functions","text":"Function Behavior sin sine cos cosine tan tangent","title":"Trigonometric functions"},{"location":"reference/angle/index.html#advancedunsafe-functions","text":"Member Behavior raw gets the raw internal value of the angle from_clamped_deg unsafe new angle from a degree value from_clamped_rad unsafe new angle from a radian value","title":"Advanced/unsafe functions"},{"location":"reference/angle/arithmetic.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator+,-(vecpp::Angle) template<typename T> constexpr Angle<T> operator+(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr Angle<T> operator-(const Angle<T>& lhs, const Angle<T>& rhs); Numerically combine two angles. Parameters Argument Role lhs The left-hand side of the operation rhs The right-hand side of the operation Return value An angle containing either the sum or difference of the angles Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); auto angle_c = angle_a + angle_b; std::cout << angle_c << \"\\n\"; } Output: -90\u00b0 See also operator+=,-=()","title":"Arithmetic"},{"location":"reference/angle/arithmetic.html#vecppoperator-vecppangle","text":"template<typename T> constexpr Angle<T> operator+(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr Angle<T> operator-(const Angle<T>& lhs, const Angle<T>& rhs); Numerically combine two angles.","title":"vecpp::operator+,-(vecpp::Angle)"},{"location":"reference/angle/arithmetic.html#parameters","text":"Argument Role lhs The left-hand side of the operation rhs The right-hand side of the operation","title":"Parameters"},{"location":"reference/angle/arithmetic.html#return-value","text":"An angle containing either the sum or difference of the angles","title":"Return value"},{"location":"reference/angle/arithmetic.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); auto angle_c = angle_a + angle_b; std::cout << angle_c << \"\\n\"; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/arithmetic.html#see-also","text":"operator+=,-=()","title":"See also"},{"location":"reference/angle/arithmetic_inplace.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator+=,-=(vecpp::Angle) template<typename T> constexpr Angle<T>& operator+=(Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr Angle<T>& operator-=(Angle<T>& lhs, const Angle<T>& rhs); Numerically combine two angles, storing the result into the first. Parameters Argument Role lhs The left-hand side of the operation and the destination rhs The right-hand side of the operation Return value A reference to lhs Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); angle_a += angle_b; std::cout << angle_a << \"\\n\"; } Output: -90\u00b0 See also operator+,-()","title":"Arithmetic inplace"},{"location":"reference/angle/arithmetic_inplace.html#vecppoperator-vecppangle","text":"template<typename T> constexpr Angle<T>& operator+=(Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr Angle<T>& operator-=(Angle<T>& lhs, const Angle<T>& rhs); Numerically combine two angles, storing the result into the first.","title":"vecpp::operator+=,-=(vecpp::Angle)"},{"location":"reference/angle/arithmetic_inplace.html#parameters","text":"Argument Role lhs The left-hand side of the operation and the destination rhs The right-hand side of the operation","title":"Parameters"},{"location":"reference/angle/arithmetic_inplace.html#return-value","text":"A reference to lhs","title":"Return value"},{"location":"reference/angle/arithmetic_inplace.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); angle_a += angle_b; std::cout << angle_a << \"\\n\"; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/arithmetic_inplace.html#see-also","text":"operator+,-()","title":"See also"},{"location":"reference/angle/as.html","text":"vecpp :: reference :: Angle<typename> vecpp::Angle::as_deg,as_rad constexpr T as_deg() const; constexpr T as_rad() const; Obtain the numerical value of the angle in the requested unit. Return value A scalar value containing the angle within the requested unit. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(90.0f); std::cout << angle.as_rad() << \"\\n\"; } Output: 1.5708","title":"As"},{"location":"reference/angle/as.html#vecppangleas_degas_rad","text":"constexpr T as_deg() const; constexpr T as_rad() const; Obtain the numerical value of the angle in the requested unit.","title":"vecpp::Angle::as_deg,as_rad"},{"location":"reference/angle/as.html#return-value","text":"A scalar value containing the angle within the requested unit.","title":"Return value"},{"location":"reference/angle/as.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(90.0f); std::cout << angle.as_rad() << \"\\n\"; } Output: 1.5708","title":"Example"},{"location":"reference/angle/cos.html","text":"vecpp :: reference :: Angle<typename> vecpp::cos template <typename T> constexpr T cos(const Angle<T>& arg); Computes the cosine of arg Parameters Argument Role arg An angle Return value The cosine of arg. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(90.0f); std::cout << cos(angle) << \"\\n\"; } Output: 0 See also sin : computes sine tan : computes tangent","title":"Cos"},{"location":"reference/angle/cos.html#vecppcos","text":"template <typename T> constexpr T cos(const Angle<T>& arg); Computes the cosine of arg","title":"vecpp::cos"},{"location":"reference/angle/cos.html#parameters","text":"Argument Role arg An angle","title":"Parameters"},{"location":"reference/angle/cos.html#return-value","text":"The cosine of arg.","title":"Return value"},{"location":"reference/angle/cos.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(90.0f); std::cout << cos(angle) << \"\\n\"; } Output: 0","title":"Example"},{"location":"reference/angle/cos.html#see-also","text":"sin : computes sine tan : computes tangent","title":"See also"},{"location":"reference/angle/format.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator<<(vecpp::Angle) template<typename T> constexpr std::ostream& operator<<(std::ostream& stream, const Angle<T>& angle); Formats the angle into the passed std::ostream . The angle will be represented as {DEG}\u00b0, where the output of DEG is delegated to operator<<(std::ostream&, T) . This is equivalent to: stream << angle.as_deg() << \"\u00b0\"; Parameters Argument Role stream The destination stream angle The angle to format Return value A reference to stream Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout << angle_a << \", \" << angle_b << \"\\n\"; } Output: 90\u00b0, -90\u00b0","title":"Format"},{"location":"reference/angle/format.html#vecppoperatorvecppangle","text":"template<typename T> constexpr std::ostream& operator<<(std::ostream& stream, const Angle<T>& angle); Formats the angle into the passed std::ostream . The angle will be represented as {DEG}\u00b0, where the output of DEG is delegated to operator<<(std::ostream&, T) . This is equivalent to: stream << angle.as_deg() << \"\u00b0\";","title":"vecpp::operator&lt;&lt;(vecpp::Angle)"},{"location":"reference/angle/format.html#parameters","text":"Argument Role stream The destination stream angle The angle to format","title":"Parameters"},{"location":"reference/angle/format.html#return-value","text":"A reference to stream","title":"Return value"},{"location":"reference/angle/format.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout << angle_a << \", \" << angle_b << \"\\n\"; } Output: 90\u00b0, -90\u00b0","title":"Example"},{"location":"reference/angle/from.html","text":"vecpp :: reference :: Angle<typename> vecpp::Angle::from_deg,from_rad static constexpr Angle from_deg(const T& val); static constexpr Angle from_rad(const T& val); Creates a new Angle from a raw value in a given unit. The angle will be re-mapped in the ]-PI,PI] radians range. Parameters Argument Role val The raw angle value in the matching unit Return value An Angle instance representing the angle. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout << angle_a << \", \" << angle_b << \"\\n\"; } Output: 90\u00b0, -90\u00b0 See also from_clamped_* : Create from clamped value.","title":"From"},{"location":"reference/angle/from.html#vecppanglefrom_degfrom_rad","text":"static constexpr Angle from_deg(const T& val); static constexpr Angle from_rad(const T& val); Creates a new Angle from a raw value in a given unit. The angle will be re-mapped in the ]-PI,PI] radians range.","title":"vecpp::Angle::from_deg,from_rad"},{"location":"reference/angle/from.html#parameters","text":"Argument Role val The raw angle value in the matching unit","title":"Parameters"},{"location":"reference/angle/from.html#return-value","text":"An Angle instance representing the angle.","title":"Return value"},{"location":"reference/angle/from.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout << angle_a << \", \" << angle_b << \"\\n\"; } Output: 90\u00b0, -90\u00b0","title":"Example"},{"location":"reference/angle/from.html#see-also","text":"from_clamped_* : Create from clamped value.","title":"See also"},{"location":"reference/angle/from_clamped.html","text":"vecpp :: reference :: Angle<typename> vecpp::Angle::from_clamped_deg,from_clamped_rad static constexpr Angle from_clamped_deg(const T& val); static constexpr Angle from_clamped_rad(const T& val); Creates a new Angle from a raw value in a given unit. Calling from_clamped_deg() with val not within the ]-180,180] range, or from_clamped_deg() with val not within the ]-PI,PI] range is undefined behavior . These functions are unsafe and should only be used to leverage situations where you are certain that the precondition is met. Parameters Argument Role val The raw angle value in the matching unit Return value An Angle instance representing the angle. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_clamped_deg(90.0f); auto angle_b = Angle::from_clamped_deg(-90.0f); std::cout << angle_a << \", \" << angle_b << \"\\n\"; } Output: 90\u00b0, -90\u00b0 See also from_* : Create from unclamped value.","title":"From clamped"},{"location":"reference/angle/from_clamped.html#vecppanglefrom_clamped_degfrom_clamped_rad","text":"static constexpr Angle from_clamped_deg(const T& val); static constexpr Angle from_clamped_rad(const T& val); Creates a new Angle from a raw value in a given unit. Calling from_clamped_deg() with val not within the ]-180,180] range, or from_clamped_deg() with val not within the ]-PI,PI] range is undefined behavior . These functions are unsafe and should only be used to leverage situations where you are certain that the precondition is met.","title":"vecpp::Angle::from_clamped_deg,from_clamped_rad"},{"location":"reference/angle/from_clamped.html#parameters","text":"Argument Role val The raw angle value in the matching unit","title":"Parameters"},{"location":"reference/angle/from_clamped.html#return-value","text":"An Angle instance representing the angle.","title":"Return value"},{"location":"reference/angle/from_clamped.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_clamped_deg(90.0f); auto angle_b = Angle::from_clamped_deg(-90.0f); std::cout << angle_a << \", \" << angle_b << \"\\n\"; } Output: 90\u00b0, -90\u00b0","title":"Example"},{"location":"reference/angle/from_clamped.html#see-also","text":"from_* : Create from unclamped value.","title":"See also"},{"location":"reference/angle/op_cmp.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator==,!=,<,<=,>,>=(vecpp::Angle) template<typename T> constexpr bool operator==(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator!=(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator<(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator<=(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator>(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator>=(const Angle<T>& lhs, const Angle<T>& rhs); Numerically compare two angles. The test is performed on the clamped value. Parameters Argument Role lhs The left-hand side of the comparison rhs The right-hand side of the comparison Return value Wether or not the numeric test passes. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(91.0f); auto angle_b = Angle::from_deg(450.0f); assert(angle_a > angle_b); }","title":"Op cmp"},{"location":"reference/angle/op_cmp.html#vecppoperatorvecppangle","text":"template<typename T> constexpr bool operator==(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator!=(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator<(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator<=(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator>(const Angle<T>& lhs, const Angle<T>& rhs); template<typename T> constexpr bool operator>=(const Angle<T>& lhs, const Angle<T>& rhs); Numerically compare two angles. The test is performed on the clamped value.","title":"vecpp::operator==,!=,&lt;,&lt;=,&gt;,&gt;=(vecpp::Angle)"},{"location":"reference/angle/op_cmp.html#parameters","text":"Argument Role lhs The left-hand side of the comparison rhs The right-hand side of the comparison","title":"Parameters"},{"location":"reference/angle/op_cmp.html#return-value","text":"Wether or not the numeric test passes.","title":"Return value"},{"location":"reference/angle/op_cmp.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(91.0f); auto angle_b = Angle::from_deg(450.0f); assert(angle_a > angle_b); }","title":"Example"},{"location":"reference/angle/raw.html","text":"vecpp :: reference :: Angle<typename> vecpp::Angle::raw constexpr const T& raw() const; Obtain the value of the internal storage of the angle. Return value A scalar value.","title":"Raw"},{"location":"reference/angle/raw.html#vecppangleraw","text":"constexpr const T& raw() const; Obtain the value of the internal storage of the angle.","title":"vecpp::Angle::raw"},{"location":"reference/angle/raw.html#return-value","text":"A scalar value.","title":"Return value"},{"location":"reference/angle/scale.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator*,/(vecpp::Angle) template<typename T> constexpr Angle<T> operator*(const Angle<T>& angle, const T& factor); template<typename T> constexpr Angle<T> operator*(const T& factor, Angle<T>& angle); template<typename T> constexpr Angle<T> operator/(const Angle<T>& angle, const T& factor); Compute the scaled value of an angle. Parameters Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle Return value An Angle containing the scaled value of angle Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_c = 3.0f * angle_a; std::cout << angle_c << \"\\n\"; } Output: -90\u00b0 See also operator*=,/=()","title":"Scale"},{"location":"reference/angle/scale.html#vecppoperatorvecppangle","text":"template<typename T> constexpr Angle<T> operator*(const Angle<T>& angle, const T& factor); template<typename T> constexpr Angle<T> operator*(const T& factor, Angle<T>& angle); template<typename T> constexpr Angle<T> operator/(const Angle<T>& angle, const T& factor); Compute the scaled value of an angle.","title":"vecpp::operator*,/(vecpp::Angle)"},{"location":"reference/angle/scale.html#parameters","text":"Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle","title":"Parameters"},{"location":"reference/angle/scale.html#return-value","text":"An Angle containing the scaled value of angle","title":"Return value"},{"location":"reference/angle/scale.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_c = 3.0f * angle_a; std::cout << angle_c << \"\\n\"; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/scale.html#see-also","text":"operator*=,/=()","title":"See also"},{"location":"reference/angle/scale_inplace.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator*,/(vecpp::Angle) template<typename T> constexpr Angle<T>& operator*=(Angle<T>& angle, const T& factor); template<typename T> constexpr Angle<T> operator/=(Angle<T>& angle, const T& factor); Compute the scaled value of an angle in-place. Parameters Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle Return value A reference to angle , which has been scaled by factor Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); angle_a *= 3.0f; std::cout << angle_a << \"\\n\"; } Output: -90\u00b0 See also operator*,/()","title":"Scale inplace"},{"location":"reference/angle/scale_inplace.html#vecppoperatorvecppangle","text":"template<typename T> constexpr Angle<T>& operator*=(Angle<T>& angle, const T& factor); template<typename T> constexpr Angle<T> operator/=(Angle<T>& angle, const T& factor); Compute the scaled value of an angle in-place.","title":"vecpp::operator*,/(vecpp::Angle)"},{"location":"reference/angle/scale_inplace.html#parameters","text":"Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle","title":"Parameters"},{"location":"reference/angle/scale_inplace.html#return-value","text":"A reference to angle , which has been scaled by factor","title":"Return value"},{"location":"reference/angle/scale_inplace.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); angle_a *= 3.0f; std::cout << angle_a << \"\\n\"; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/scale_inplace.html#see-also","text":"operator*,/()","title":"See also"},{"location":"reference/angle/sin.html","text":"vecpp :: reference :: Angle<typename> vecpp::sin template <typename T> constexpr T sin(const Angle<T>& arg); Computes the sin of arg Parameters Argument Role arg An angle Return value the sine of arg. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(90.0f); std::cout << sin(angle) << \"\\n\"; } Output: 1 See also cos : computes cosine tan : computes tangent","title":"Sin"},{"location":"reference/angle/sin.html#vecppsin","text":"template <typename T> constexpr T sin(const Angle<T>& arg); Computes the sin of arg","title":"vecpp::sin"},{"location":"reference/angle/sin.html#parameters","text":"Argument Role arg An angle","title":"Parameters"},{"location":"reference/angle/sin.html#return-value","text":"the sine of arg.","title":"Return value"},{"location":"reference/angle/sin.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(90.0f); std::cout << sin(angle) << \"\\n\"; } Output: 1","title":"Example"},{"location":"reference/angle/sin.html#see-also","text":"cos : computes cosine tan : computes tangent","title":"See also"},{"location":"reference/angle/tan.html","text":"vecpp :: reference :: Angle<typename> vecpp::tan template <typename T> constexpr T tan(const Angle<T>& arg); Computes the tangent of arg Parameters Argument Role arg An angle Return value The tangent of arg. Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(45.0f); std::cout << tan(angle) << \"\\n\"; } Output: 1 See also sin : computes sine cos : computes cosine","title":"Tan"},{"location":"reference/angle/tan.html#vecpptan","text":"template <typename T> constexpr T tan(const Angle<T>& arg); Computes the tangent of arg","title":"vecpp::tan"},{"location":"reference/angle/tan.html#parameters","text":"Argument Role arg An angle","title":"Parameters"},{"location":"reference/angle/tan.html#return-value","text":"The tangent of arg.","title":"Return value"},{"location":"reference/angle/tan.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Angle = vecpp::Angle<float>; auto angle = Angle::from_deg(45.0f); std::cout << tan(angle) << \"\\n\"; } Output: 1","title":"Example"},{"location":"reference/angle/tan.html#see-also","text":"sin : computes sine cos : computes cosine","title":"See also"},{"location":"reference/angle/unary_minus.html","text":"vecpp :: reference :: Angle<typename> vecpp::operator-(vecpp::Angle) unary template<typename T> constexpr Angle<T> operator-(const Angle<T>& rhs); Returns the negated version of the angle Keep in mind that in the angle's clamp space, -PI == PI. Parameters Argument Role rhs The angle to negate Return value An angle of inverse magnitude as 'rhs' Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); std::cout << -angle_a << \" \" << -angle_b << \"\\n\"; } Output: -90\u00b0 180\u00b0","title":"Unary minus"},{"location":"reference/angle/unary_minus.html#vecppoperator-vecppangleunary","text":"template<typename T> constexpr Angle<T> operator-(const Angle<T>& rhs); Returns the negated version of the angle Keep in mind that in the angle's clamp space, -PI == PI.","title":"vecpp::operator-(vecpp::Angle)unary"},{"location":"reference/angle/unary_minus.html#parameters","text":"Argument Role rhs The angle to negate","title":"Parameters"},{"location":"reference/angle/unary_minus.html#return-value","text":"An angle of inverse magnitude as 'rhs'","title":"Return value"},{"location":"reference/angle/unary_minus.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using Angle = vecpp::Angle<float>; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); std::cout << -angle_a << \" \" << -angle_b << \"\\n\"; } Output: -90\u00b0 180\u00b0","title":"Example"},{"location":"reference/mat/index.html","text":"vecpp :: reference Mat template<typename T, std::size_t C, std::size_t R> struct Mat; A regular mathematical dense matrix. Member types Member Type Definition value_type T col_type Vec<value_type, rows> row_type Vec<value_type, cols> Member constants name type Definition rows std::size_t Number of rows cols std::size_t Number of columns Member functions Member Behavior (constructor) initalize using aggregate initialization (destructor) destroy every element in the matrix operator= ovewrite the matrix with another matrix at access specific element with bounds checking operator[] access specific element data access underlying array Non-member functions Language support Function Behavior operator<< print to stream Per-member operations Function Behavior operator== compares two vectors for equality operator!= compares two vectors for inequality operator-= per-member substraction operator/= per-member division operator- per-member substraction operator+ per-member addition Unary operations Function Behavior operator- (unary) negation Scalar operations Function Behavior operator/= (scalar) matrix scaling operator*= (scalar) matrix scaling operator/ (scalar) matrix scaling operator* (scalar) matrix scaling Geometric functions Function Behavior determinant Calculate determinant transpose Generate transposed matrix","title":"Matrix"},{"location":"reference/mat/index.html#mat","text":"template<typename T, std::size_t C, std::size_t R> struct Mat; A regular mathematical dense matrix.","title":"Mat"},{"location":"reference/mat/index.html#member-types","text":"Member Type Definition value_type T col_type Vec<value_type, rows> row_type Vec<value_type, cols>","title":"Member types"},{"location":"reference/mat/index.html#member-constants","text":"name type Definition rows std::size_t Number of rows cols std::size_t Number of columns","title":"Member constants"},{"location":"reference/mat/index.html#member-functions","text":"Member Behavior (constructor) initalize using aggregate initialization (destructor) destroy every element in the matrix operator= ovewrite the matrix with another matrix at access specific element with bounds checking operator[] access specific element data access underlying array","title":"Member functions"},{"location":"reference/mat/index.html#non-member-functions","text":"","title":"Non-member functions"},{"location":"reference/mat/index.html#language-support","text":"Function Behavior operator<< print to stream","title":"Language support"},{"location":"reference/mat/index.html#per-member-operations","text":"Function Behavior operator== compares two vectors for equality operator!= compares two vectors for inequality operator-= per-member substraction operator/= per-member division operator- per-member substraction operator+ per-member addition","title":"Per-member operations"},{"location":"reference/mat/index.html#unary-operations","text":"Function Behavior operator- (unary) negation","title":"Unary operations"},{"location":"reference/mat/index.html#scalar-operations","text":"Function Behavior operator/= (scalar) matrix scaling operator*= (scalar) matrix scaling operator/ (scalar) matrix scaling operator* (scalar) matrix scaling","title":"Scalar operations"},{"location":"reference/mat/index.html#geometric-functions","text":"Function Behavior determinant Calculate determinant transpose Generate transposed matrix","title":"Geometric functions"},{"location":"reference/mat/at.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::Mat::at() constexpr T& at(std::size_t c, std::size_t r); constexpr const T& at(std::size_t c, std::size_t r) const; Parameters Argument Role c The column of the cell to access r The column of the row to access Return value A reference to the requested element. Exceptions std::out_of_range See also operator[] : Access without bounds checking.","title":"At"},{"location":"reference/mat/at.html#vecppmatat","text":"constexpr T& at(std::size_t c, std::size_t r); constexpr const T& at(std::size_t c, std::size_t r) const;","title":"vecpp::Mat::at()"},{"location":"reference/mat/at.html#parameters","text":"Argument Role c The column of the cell to access r The column of the row to access","title":"Parameters"},{"location":"reference/mat/at.html#return-value","text":"A reference to the requested element.","title":"Return value"},{"location":"reference/mat/at.html#exceptions","text":"std::out_of_range","title":"Exceptions"},{"location":"reference/mat/at.html#see-also","text":"operator[] : Access without bounds checking.","title":"See also"},{"location":"reference/mat/constructor.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> Mat<T, C, R> does not define a constructor per-se, but instead relies entirely on aggregate initialization. default construction Default-constructing a matrix will leave it in an undefined state. N.B. Default-constructed matrices are not allowed in constexpr code, which is why you might see some Mat v = {}; within the vecpp codebase where default initialization would have made sense. Examples: using Mat2 = Mat<float, 2, 2>; // default construction Mat2 mat; // value-construction Mat2 identity = { 1.0f, 0.0f, 0.0f, 1.0f }; // copy-construction Mat2 identity_copy = identity;","title":"Constructor"},{"location":"reference/mat/constructor.html#default-construction","text":"Default-constructing a matrix will leave it in an undefined state. N.B. Default-constructed matrices are not allowed in constexpr code, which is why you might see some Mat v = {}; within the vecpp codebase where default initialization would have made sense.","title":"default construction"},{"location":"reference/mat/constructor.html#examples","text":"using Mat2 = Mat<float, 2, 2>; // default construction Mat2 mat; // value-construction Mat2 identity = { 1.0f, 0.0f, 0.0f, 1.0f }; // copy-construction Mat2 identity_copy = identity;","title":"Examples:"},{"location":"reference/mat/data.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::Mat::data() constexpr T* data(); constexpr const T* data() const; Return value A pointer to the underlying storage.","title":"Data"},{"location":"reference/mat/data.html#vecppmatdata","text":"constexpr T* data(); constexpr const T* data() const;","title":"vecpp::Mat::data()"},{"location":"reference/mat/data.html#return-value","text":"A pointer to the underlying storage.","title":"Return value"},{"location":"reference/mat/determinant.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::determinant(vecpp::Mat) template<typename T, std::size_t N> constexpr T Determinant(const Mat<T, N, N>& arg); Returns the determinant of the square matrix. Parameters Argument Role arg The matrix to reduce Return value The determinant of the matrix.","title":"Determinant"},{"location":"reference/mat/determinant.html#vecppdeterminantvecppmat","text":"template<typename T, std::size_t N> constexpr T Determinant(const Mat<T, N, N>& arg); Returns the determinant of the square matrix.","title":"vecpp::determinant(vecpp::Mat)"},{"location":"reference/mat/determinant.html#parameters","text":"Argument Role arg The matrix to reduce","title":"Parameters"},{"location":"reference/mat/determinant.html#return-value","text":"The determinant of the matrix.","title":"Return value"},{"location":"reference/mat/format.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator<<(vecpp::Mat) template<typename T, std::size_t C, std::size_t R> constexpr std::ostream& operator<<(std::ostream& stream, const Mat<T, C, R>& mat); Formats the matrix into the passed std::ostream . Parameters Argument Role stream The destination stream mat The matrix to format Return value A reference to stream","title":"Format"},{"location":"reference/mat/format.html#vecppoperatorvecppmat","text":"template<typename T, std::size_t C, std::size_t R> constexpr std::ostream& operator<<(std::ostream& stream, const Mat<T, C, R>& mat); Formats the matrix into the passed std::ostream .","title":"vecpp::operator&lt;&lt;(vecpp::Mat)"},{"location":"reference/mat/format.html#parameters","text":"Argument Role stream The destination stream mat The matrix to format","title":"Parameters"},{"location":"reference/mat/format.html#return-value","text":"A reference to stream","title":"Return value"},{"location":"reference/mat/op_cmp.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator==,!=(vecpp::Mat) 1) template<typename T, std::size_t C, std::size_t R> constexpr bool operator==(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); 2) template<typename T, std::size_t C, std::size_t R> constexpr bool operator!=(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); Compares matrices for equality. Parameters Argument Role lhs The first matrix to compare rhs The second matrix to compare N.B. lhs and rhs must be the exact same matrix type, mixed type comparisons are not supported. Return value 1) true if both matrices are equal element-wise 2) true if any element at a given location differs between the matrices","title":"Op cmp"},{"location":"reference/mat/op_cmp.html#vecppoperatorvecppmat","text":"1) template<typename T, std::size_t C, std::size_t R> constexpr bool operator==(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); 2) template<typename T, std::size_t C, std::size_t R> constexpr bool operator!=(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); Compares matrices for equality.","title":"vecpp::operator==,!=(vecpp::Mat)"},{"location":"reference/mat/op_cmp.html#parameters","text":"Argument Role lhs The first matrix to compare rhs The second matrix to compare N.B. lhs and rhs must be the exact same matrix type, mixed type comparisons are not supported.","title":"Parameters"},{"location":"reference/mat/op_cmp.html#return-value","text":"1) true if both matrices are equal element-wise 2) true if any element at a given location differs between the matrices","title":"Return value"},{"location":"reference/mat/op_per_mem.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator+,-(vecpp::Mat) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator+(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator-(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); Performs binary operations member-wise on two matrices. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Matrix containing the member-wise result of the binary operation applied on each input matrix.","title":"Op per mem"},{"location":"reference/mat/op_per_mem.html#vecppoperator-vecppmat","text":"template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator+(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator-(const Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); Performs binary operations member-wise on two matrices.","title":"vecpp::operator+,-(vecpp::Mat)"},{"location":"reference/mat/op_per_mem.html#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/mat/op_per_mem.html#return-value","text":"A Matrix containing the member-wise result of the binary operation applied on each input matrix.","title":"Return value"},{"location":"reference/mat/op_per_mem_compound.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator+=,-=(vecpp::Mat) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator+=(Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator-=(Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); Performs binary operations member-wise on two matrices, and updates the first with the result. Parameters Argument Role lhs The first matrix to consume, and where the results are stored rhs The second matrix to consume Return value A reference to lhs.","title":"Op per mem compound"},{"location":"reference/mat/op_per_mem_compound.html#vecppoperator-vecppmat","text":"template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator+=(Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator-=(Mat<T, C, R>& lhs, const Mat<T, C, R>& rhs); Performs binary operations member-wise on two matrices, and updates the first with the result.","title":"vecpp::operator+=,-=(vecpp::Mat)"},{"location":"reference/mat/op_per_mem_compound.html#parameters","text":"Argument Role lhs The first matrix to consume, and where the results are stored rhs The second matrix to consume","title":"Parameters"},{"location":"reference/mat/op_per_mem_compound.html#return-value","text":"A reference to lhs.","title":"Return value"},{"location":"reference/mat/operator_at.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::Mat::opertor constexpr T& operator[](std::size_t c, std::size_t r); constexpr const T& operator[](std::size_t c, std::size_t r) const; Parameters Argument Role c The column of the cell to access r The column of the row to access Return value A reference to the requested element. N.B. Bounds checking is still performed in debug builds as a safety mechanism, but this should not be relied upon. See also at() : Access with bounds checking.","title":"Operator at"},{"location":"reference/mat/operator_at.html#vecppmatopertor","text":"constexpr T& operator[](std::size_t c, std::size_t r); constexpr const T& operator[](std::size_t c, std::size_t r) const;","title":"vecpp::Mat::opertor"},{"location":"reference/mat/operator_at.html#parameters","text":"Argument Role c The column of the cell to access r The column of the row to access","title":"Parameters"},{"location":"reference/mat/operator_at.html#return-value","text":"A reference to the requested element.","title":"Return value"},{"location":"reference/mat/operator_at.html#nb","text":"Bounds checking is still performed in debug builds as a safety mechanism, but this should not be relied upon.","title":"N.B."},{"location":"reference/mat/operator_at.html#see-also","text":"at() : Access with bounds checking.","title":"See also"},{"location":"reference/mat/scaling.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator*,/(vecpp::Mat, T) 1) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator*(const Mat<T, C, R>& mat, const T& scale); template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator*(const T& scale, const Mat<T, C, R>& mat); 2) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator/(Mat<T, C, R>& mat, const T& scale); Computes a matrix representing the passed matrix scaled by the operand. 1) Multiplies each member of the matrix by the operand 2) Divides each member of the matrix by the operand Parameters Argument Role mat The vector to scale scale The scaling operand Return value A matrix equivalent to mat with each of its members scaled by scale N.B. The implementation of the library may choose to use operator*(T, T) or operator*=(T&, T) interchangeably in order to implement this. If these two implementations are not consistent, then the result is undefined.","title":"Scaling"},{"location":"reference/mat/scaling.html#vecppoperatorvecppmat-t","text":"1) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator*(const Mat<T, C, R>& mat, const T& scale); template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator*(const T& scale, const Mat<T, C, R>& mat); 2) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator/(Mat<T, C, R>& mat, const T& scale); Computes a matrix representing the passed matrix scaled by the operand. 1) Multiplies each member of the matrix by the operand 2) Divides each member of the matrix by the operand","title":"vecpp::operator*,/(vecpp::Mat, T)"},{"location":"reference/mat/scaling.html#parameters","text":"Argument Role mat The vector to scale scale The scaling operand","title":"Parameters"},{"location":"reference/mat/scaling.html#return-value","text":"A matrix equivalent to mat with each of its members scaled by scale","title":"Return value"},{"location":"reference/mat/scaling.html#nb","text":"The implementation of the library may choose to use operator*(T, T) or operator*=(T&, T) interchangeably in order to implement this. If these two implementations are not consistent, then the result is undefined.","title":"N.B."},{"location":"reference/mat/scaling_compound.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator*=,/=(vecpp::Mat, T) 1) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator*=(Mat<T, C, R>& lhs, const T& rhs); 2) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator/=(Mat<T, C, R>& lhs, const T& rhs); Scales each member of the matrix by the operand. 1) Multiplies each member of the matrix by the operand 2) Divides each member of the matrix by the operand Parameters Argument Role lhs The matrix to scale rhs The scaling operand Return value A reference to lhs.","title":"Scaling compound"},{"location":"reference/mat/scaling_compound.html#vecppoperatorvecppmat-t","text":"1) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator*=(Mat<T, C, R>& lhs, const T& rhs); 2) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R>& operator/=(Mat<T, C, R>& lhs, const T& rhs); Scales each member of the matrix by the operand. 1) Multiplies each member of the matrix by the operand 2) Divides each member of the matrix by the operand","title":"vecpp::operator*=,/=(vecpp::Mat, T)"},{"location":"reference/mat/scaling_compound.html#parameters","text":"Argument Role lhs The matrix to scale rhs The scaling operand","title":"Parameters"},{"location":"reference/mat/scaling_compound.html#return-value","text":"A reference to lhs.","title":"Return value"},{"location":"reference/mat/transpose.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::transpose(vecpp::Vec) template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, R, C> Determinant(const Mat<T, C, R>& arg); Returns a transposed matrix Parameters Argument Role arg The matrix to transpose Return value The transposed matrix","title":"Transpose"},{"location":"reference/mat/transpose.html#vecpptransposevecppvec","text":"template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, R, C> Determinant(const Mat<T, C, R>& arg); Returns a transposed matrix","title":"vecpp::transpose(vecpp::Vec)"},{"location":"reference/mat/transpose.html#parameters","text":"Argument Role arg The matrix to transpose","title":"Parameters"},{"location":"reference/mat/transpose.html#return-value","text":"The transposed matrix","title":"Return value"},{"location":"reference/mat/unary_minus.html","text":"vecpp :: reference :: Mat<typename, std::size_t, std::size_t> vecpp::operator-(vecpp::Mat) unary template<typename T, std::size_t L> constexpr Vec<T,L> operator-(const Vec<T,L>& rhs); Returns the negated version of the vector Parameters Argument Role rhs The vector to negate Return value A vector equivalent to rhs where operator-() has been applied to it element-wise. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, -5.0f}; fVec2 b = -a; assert(b[0] == -10.0f); assert(b[1] == 5.0f); }","title":"Unary minus"},{"location":"reference/mat/unary_minus.html#vecppoperator-vecppmatunary","text":"template<typename T, std::size_t L> constexpr Vec<T,L> operator-(const Vec<T,L>& rhs); Returns the negated version of the vector","title":"vecpp::operator-(vecpp::Mat)unary"},{"location":"reference/mat/unary_minus.html#parameters","text":"Argument Role rhs The vector to negate","title":"Parameters"},{"location":"reference/mat/unary_minus.html#return-value","text":"A vector equivalent to rhs where operator-() has been applied to it element-wise.","title":"Return value"},{"location":"reference/mat/unary_minus.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, -5.0f}; fVec2 b = -a; assert(b[0] == -10.0f); assert(b[1] == 5.0f); }","title":"Example"},{"location":"reference/vec/index.html","text":"vecpp :: reference Vec template<typename T, std::size_t L> struct Vec; In many respects, Vec behaves a lot like std::array<> , but with support for mathematical operations. Member types Member Type Definition value_type T Member functions Member Behavior (constructor) initalize using aggregate initialization (destructor) destroy every element in the vectpr operator= ovewrite the vector with another vector at access specific element with bounds checking operator[] access specific element data access underlying array Non-member functions Language support Function Behavior begin iterator to the beginning end iterator to the end operator<< print to stream Per-member operations Function Behavior operator== compares two vectors for equality operator!= compares two vectors for inequality operator-= per-member substraction operator+= per-member addition operator*= per-member multiplication operator/= per-member division operator- per-member substraction operator+ per-member addition operator* per-member multiplication operator/ per-member division abs per-member abs() min per-member min() max per-member max() Unary operations Function Behavior operator- (unary) negation Scalar operations Function Behavior operator/= (scalar) vector scaling operator*= (scalar) vector scaling operator/ (scalar) vector scaling operator* (scalar) vector scaling Geometric functions Function Behavior lenght get vector's L2 norm dot dot product cross cross product","title":"Vector"},{"location":"reference/vec/index.html#vec","text":"template<typename T, std::size_t L> struct Vec; In many respects, Vec behaves a lot like std::array<> , but with support for mathematical operations.","title":"Vec"},{"location":"reference/vec/index.html#member-types","text":"Member Type Definition value_type T","title":"Member types"},{"location":"reference/vec/index.html#member-functions","text":"Member Behavior (constructor) initalize using aggregate initialization (destructor) destroy every element in the vectpr operator= ovewrite the vector with another vector at access specific element with bounds checking operator[] access specific element data access underlying array","title":"Member functions"},{"location":"reference/vec/index.html#non-member-functions","text":"","title":"Non-member functions"},{"location":"reference/vec/index.html#language-support","text":"Function Behavior begin iterator to the beginning end iterator to the end operator<< print to stream","title":"Language support"},{"location":"reference/vec/index.html#per-member-operations","text":"Function Behavior operator== compares two vectors for equality operator!= compares two vectors for inequality operator-= per-member substraction operator+= per-member addition operator*= per-member multiplication operator/= per-member division operator- per-member substraction operator+ per-member addition operator* per-member multiplication operator/ per-member division abs per-member abs() min per-member min() max per-member max()","title":"Per-member operations"},{"location":"reference/vec/index.html#unary-operations","text":"Function Behavior operator- (unary) negation","title":"Unary operations"},{"location":"reference/vec/index.html#scalar-operations","text":"Function Behavior operator/= (scalar) vector scaling operator*= (scalar) vector scaling operator/ (scalar) vector scaling operator* (scalar) vector scaling","title":"Scalar operations"},{"location":"reference/vec/index.html#geometric-functions","text":"Function Behavior lenght get vector's L2 norm dot dot product cross cross product","title":"Geometric functions"},{"location":"reference/vec/abs.html","text":"vecpp :: Vec<typename, size_t> vecpp::abs(vecpp::Vec) template<typename T, std::size_t L> constexpr Vec<T,L> abs(const Vec<T,L>& vec); Performs std::abs() member-wise on a vector. Parameters Argument Role vec The vector to consume Return value A Vector containing the member-wise absolute value of the input vector. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, -5.0f}; fVec2 b = abs(a); assert(b[0] == 10.0f); assert(b[1] == 5.0f); }","title":"Abs"},{"location":"reference/vec/abs.html#vecppabsvecppvec","text":"template<typename T, std::size_t L> constexpr Vec<T,L> abs(const Vec<T,L>& vec); Performs std::abs() member-wise on a vector.","title":"vecpp::abs(vecpp::Vec)"},{"location":"reference/vec/abs.html#parameters","text":"Argument Role vec The vector to consume","title":"Parameters"},{"location":"reference/vec/abs.html#return-value","text":"A Vector containing the member-wise absolute value of the input vector.","title":"Return value"},{"location":"reference/vec/abs.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, -5.0f}; fVec2 b = abs(a); assert(b[0] == 10.0f); assert(b[1] == 5.0f); }","title":"Example"},{"location":"reference/vec/at.html","text":"vecpp :: Vec<typename, size_t> vecpp::Vec::at() constexpr T& at(std::size_t i); constexpr const T& at(std::size_t i) const; Parameters Argument Role i index of the element to access. Return value A reference to the requested element. Exceptions std::out_of_range See also operator[] : Access without bounds checking.","title":"At"},{"location":"reference/vec/at.html#vecppvecat","text":"constexpr T& at(std::size_t i); constexpr const T& at(std::size_t i) const;","title":"vecpp::Vec::at()"},{"location":"reference/vec/at.html#parameters","text":"Argument Role i index of the element to access.","title":"Parameters"},{"location":"reference/vec/at.html#return-value","text":"A reference to the requested element.","title":"Return value"},{"location":"reference/vec/at.html#exceptions","text":"std::out_of_range","title":"Exceptions"},{"location":"reference/vec/at.html#see-also","text":"operator[] : Access without bounds checking.","title":"See also"},{"location":"reference/vec/begin.html","text":"vecpp :: Vec<typename, size_t> vecpp::begin(vecpp::Vec) template<typename T, std::size_t L> constexpr T* begin(Vec<T,L>& v); template<typename T, std::size_t L> constexpr const T* begin(const Vec<T,L>& v); Returns an iterator to the first element of the vector. This can be used directly, or indirectly through a range-based for loop. Parameters Argument Role v The vector to get the iterator from Return value Iterator to the first element. Example #include \"vecpp/vecpp.h\" #include <numeric> float sum_elements(const vecpp::Vec<float, 3>& v) { return std::accumulate(begin(v), end(v), 0.0f); } See also end : Returns an iterator to the end.","title":"Begin"},{"location":"reference/vec/begin.html#vecppbeginvecppvec","text":"template<typename T, std::size_t L> constexpr T* begin(Vec<T,L>& v); template<typename T, std::size_t L> constexpr const T* begin(const Vec<T,L>& v); Returns an iterator to the first element of the vector. This can be used directly, or indirectly through a range-based for loop.","title":"vecpp::begin(vecpp::Vec)"},{"location":"reference/vec/begin.html#parameters","text":"Argument Role v The vector to get the iterator from","title":"Parameters"},{"location":"reference/vec/begin.html#return-value","text":"Iterator to the first element.","title":"Return value"},{"location":"reference/vec/begin.html#example","text":"#include \"vecpp/vecpp.h\" #include <numeric> float sum_elements(const vecpp::Vec<float, 3>& v) { return std::accumulate(begin(v), end(v), 0.0f); }","title":"Example"},{"location":"reference/vec/begin.html#see-also","text":"end : Returns an iterator to the end.","title":"See also"},{"location":"reference/vec/constructor.html","text":"vecpp :: Vec<typename, size_t> vecpp::Vec::Vec Vec<T, L> does not define a constructor per-se, but instead relies entirely on aggregate initialization. default construction Default-constructing a vector will leave it in an undefined state. N.B. Default-constructed vectors are not allowed in constexpr code, which is why you might see some Vec v = {}; within the vecpp codebase where default initialization would have made sense. Examples: // default construction Vec<float, 3> vec; // value-construction Vec<float, 3> y_axis = {0.0f, 1.0f, 0.0f}; // copy-construction Vec<float, 3> y_axis_copy = y_axis;","title":"Constructor"},{"location":"reference/vec/constructor.html#vecppvecvec","text":"Vec<T, L> does not define a constructor per-se, but instead relies entirely on aggregate initialization.","title":"vecpp::Vec::Vec"},{"location":"reference/vec/constructor.html#default-construction","text":"Default-constructing a vector will leave it in an undefined state. N.B. Default-constructed vectors are not allowed in constexpr code, which is why you might see some Vec v = {}; within the vecpp codebase where default initialization would have made sense.","title":"default construction"},{"location":"reference/vec/constructor.html#examples","text":"// default construction Vec<float, 3> vec; // value-construction Vec<float, 3> y_axis = {0.0f, 1.0f, 0.0f}; // copy-construction Vec<float, 3> y_axis_copy = y_axis;","title":"Examples:"},{"location":"reference/vec/cross.html","text":"vecpp :: Vec<typename, size_t> vecpp::cross(vecpp::Vec) template<typename T> constexpr T cross(const Vec<T,3>& lhs, const Vec<T,3>& rhs); Computes the cross product between two three-dimensional vectors. Parameters Argument Role lhs The first vector operand rhs The second vector operand Return value The cross product of the passed vectors. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec3 = vecpp::Vec<float, 3>; fVec3 x = {1.0f, 0.0f, 0.0f}; fVec3 y = {0.0f, 1.0f, 0.0f}; fVec3 z = {0.0f, 0.0f, 1.0f}; fVec3 cross_val = cross(x, y); assert(norm(cross_val-z) < 0.0001f); }","title":"Cross"},{"location":"reference/vec/cross.html#vecppcrossvecppvec","text":"template<typename T> constexpr T cross(const Vec<T,3>& lhs, const Vec<T,3>& rhs); Computes the cross product between two three-dimensional vectors.","title":"vecpp::cross(vecpp::Vec)"},{"location":"reference/vec/cross.html#parameters","text":"Argument Role lhs The first vector operand rhs The second vector operand","title":"Parameters"},{"location":"reference/vec/cross.html#return-value","text":"The cross product of the passed vectors.","title":"Return value"},{"location":"reference/vec/cross.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec3 = vecpp::Vec<float, 3>; fVec3 x = {1.0f, 0.0f, 0.0f}; fVec3 y = {0.0f, 1.0f, 0.0f}; fVec3 z = {0.0f, 0.0f, 1.0f}; fVec3 cross_val = cross(x, y); assert(norm(cross_val-z) < 0.0001f); }","title":"Example"},{"location":"reference/vec/data.html","text":"vecpp :: Vec<typename, size_t> vecpp::Vec::data() constexpr T* data(); constexpr const T* data() const; Return value A pointer to the underlying storage.","title":"Data"},{"location":"reference/vec/data.html#vecppvecdata","text":"constexpr T* data(); constexpr const T* data() const;","title":"vecpp::Vec::data()"},{"location":"reference/vec/data.html#return-value","text":"A pointer to the underlying storage.","title":"Return value"},{"location":"reference/vec/dot.html","text":"vecpp :: Vec<typename, size_t> vecpp::dot(vecpp::Vec) template<typename T, std::size_t L> constexpr T dot(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Returns the dot product of the thw argument vectors Parameters Argument Role lhs The first vector operand rhs The second vector operand Return value The dot product of the passed vectors. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; float dot_val = dot(a, b); assert(dot_val == 3.0f); }","title":"Dot"},{"location":"reference/vec/dot.html#vecppdotvecppvec","text":"template<typename T, std::size_t L> constexpr T dot(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Returns the dot product of the thw argument vectors","title":"vecpp::dot(vecpp::Vec)"},{"location":"reference/vec/dot.html#parameters","text":"Argument Role lhs The first vector operand rhs The second vector operand","title":"Parameters"},{"location":"reference/vec/dot.html#return-value","text":"The dot product of the passed vectors.","title":"Return value"},{"location":"reference/vec/dot.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; float dot_val = dot(a, b); assert(dot_val == 3.0f); }","title":"Example"},{"location":"reference/vec/end.html","text":"vecpp :: Vec<typename, size_t> vecpp::end(vecpp::Vec) template<typename T, std::size_t L> constexpr T* end(Vec<T,L>& v); template<typename T, std::size_t L> constexpr const T* end(const Vec<T,L>& v); Returns a past-the-end iterator for the provided vector. Parameters Argument Role v The vector to get the iterator from Return value iterator tpast the last element. See also begin : Returns an iterator to the end.","title":"End"},{"location":"reference/vec/end.html#vecppendvecppvec","text":"template<typename T, std::size_t L> constexpr T* end(Vec<T,L>& v); template<typename T, std::size_t L> constexpr const T* end(const Vec<T,L>& v); Returns a past-the-end iterator for the provided vector.","title":"vecpp::end(vecpp::Vec)"},{"location":"reference/vec/end.html#parameters","text":"Argument Role v The vector to get the iterator from","title":"Parameters"},{"location":"reference/vec/end.html#return-value","text":"iterator tpast the last element.","title":"Return value"},{"location":"reference/vec/end.html#see-also","text":"begin : Returns an iterator to the end.","title":"See also"},{"location":"reference/vec/format.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator<<(vecpp::Vec) template<typename T, std::size_t L> constexpr std::ostream& operator<<(std::ostream& stream, const Vec<T,L>& vec); Formats the vector into the passed std::ostream . The format is (a, b, c, ...) , where the individual members are generated using operator<<(std::ostream&, T) . Parameters Argument Role stream The destination stream vec The vector to format Return value A reference to stream Example #include \"vecpp/vecpp.h\" #include <iostream> int main() { using Vec3 = vecpp::Vec<int, 3>; Vec3 vec = {1, 2, 3}; std::cout << vec << \"\\n\"; } Output: (1, 2, 3)","title":"Format"},{"location":"reference/vec/format.html#vecppoperatorvecppvec","text":"template<typename T, std::size_t L> constexpr std::ostream& operator<<(std::ostream& stream, const Vec<T,L>& vec); Formats the vector into the passed std::ostream . The format is (a, b, c, ...) , where the individual members are generated using operator<<(std::ostream&, T) .","title":"vecpp::operator&lt;&lt;(vecpp::Vec)"},{"location":"reference/vec/format.html#parameters","text":"Argument Role stream The destination stream vec The vector to format","title":"Parameters"},{"location":"reference/vec/format.html#return-value","text":"A reference to stream","title":"Return value"},{"location":"reference/vec/format.html#example","text":"#include \"vecpp/vecpp.h\" #include <iostream> int main() { using Vec3 = vecpp::Vec<int, 3>; Vec3 vec = {1, 2, 3}; std::cout << vec << \"\\n\"; } Output: (1, 2, 3)","title":"Example"},{"location":"reference/vec/max.html","text":"vecpp :: Vec<typename, size_t> vecpp::max(vecpp::Vec) template<typename T, std::size_t L> constexpr Vec<T,L> max(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs std::max() member-wise on two vectors. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Vector containing the member-wise largest element of each input vector. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = max(a,b); assert(c[0] == 10.0f); assert(c[1] == 6.0f); } See also min : per-member min()","title":"Max"},{"location":"reference/vec/max.html#vecppmaxvecppvec","text":"template<typename T, std::size_t L> constexpr Vec<T,L> max(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs std::max() member-wise on two vectors.","title":"vecpp::max(vecpp::Vec)"},{"location":"reference/vec/max.html#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/max.html#return-value","text":"A Vector containing the member-wise largest element of each input vector.","title":"Return value"},{"location":"reference/vec/max.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = max(a,b); assert(c[0] == 10.0f); assert(c[1] == 6.0f); }","title":"Example"},{"location":"reference/vec/max.html#see-also","text":"min : per-member min()","title":"See also"},{"location":"reference/vec/min.html","text":"vecpp :: Vec<typename, size_t> vecpp::min(vecpp::Vec) template<typename T, std::size_t L> constexpr Vec<T,L> min(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs std::min() member-wise on two vectors. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Vector containing the member-wise smallest element of each input vector. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = min(a,b); assert(c[0] == 5.0f); assert(c[1] == 5.0f); } See also max : per-member max()","title":"Min"},{"location":"reference/vec/min.html#vecppminvecppvec","text":"template<typename T, std::size_t L> constexpr Vec<T,L> min(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs std::min() member-wise on two vectors.","title":"vecpp::min(vecpp::Vec)"},{"location":"reference/vec/min.html#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/min.html#return-value","text":"A Vector containing the member-wise smallest element of each input vector.","title":"Return value"},{"location":"reference/vec/min.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = min(a,b); assert(c[0] == 5.0f); assert(c[1] == 5.0f); }","title":"Example"},{"location":"reference/vec/min.html#see-also","text":"max : per-member max()","title":"See also"},{"location":"reference/vec/norm.html","text":"vecpp :: Vec<typename, size_t> vecpp::norm(vecpp::Vec) template<typename T, std::size_t L> constexpr T norm(const Vec<T,L>& arg); Returns the euclidian norm of the vector Parameters Argument Role arg The vector we want the legnth of Return value The norm of the vector. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; assert(norm(a) == 3.0f); assert(norm(b) == std::sqrt(2.0f)); }","title":"Norm"},{"location":"reference/vec/norm.html#vecppnormvecppvec","text":"template<typename T, std::size_t L> constexpr T norm(const Vec<T,L>& arg); Returns the euclidian norm of the vector","title":"vecpp::norm(vecpp::Vec)"},{"location":"reference/vec/norm.html#parameters","text":"Argument Role arg The vector we want the legnth of","title":"Parameters"},{"location":"reference/vec/norm.html#return-value","text":"The norm of the vector.","title":"Return value"},{"location":"reference/vec/norm.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; assert(norm(a) == 3.0f); assert(norm(b) == std::sqrt(2.0f)); }","title":"Example"},{"location":"reference/vec/op_cmp.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator==,!=(vecpp::Vec) 1) template<typename T, std::size_t L> constexpr bool operator==(const Vec<T,L>& lhs, const Vec<T,L>& rhs); 2) template<typename T, std::size_t L> constexpr bool operator!=(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Compares vectors for equality. Parameters Argument Role lhs The first vector to compare rhs The second vector to compare N.B. lhs and rhs must be the exact same vector type, mixed type comparisons are not supported. Return value 1) true if both vectors are equal element-wise 2) true if any element at a given index differs between the vectors Example #include \"vecpp/vecpp.h\" void foo() { constexpr vecpp::Vec<float, 2> a = {1.0f, 1.0f}; constexpr vecpp::Vec<float, 2> b = {1.0f, 1.0f}; constexpr vecpp::Vec<float, 2> c = {1.0f, 2.0f}; static_assert(a == b); static_assert(a != c); }","title":"Op cmp"},{"location":"reference/vec/op_cmp.html#vecppoperatorvecppvec","text":"1) template<typename T, std::size_t L> constexpr bool operator==(const Vec<T,L>& lhs, const Vec<T,L>& rhs); 2) template<typename T, std::size_t L> constexpr bool operator!=(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Compares vectors for equality.","title":"vecpp::operator==,!=(vecpp::Vec)"},{"location":"reference/vec/op_cmp.html#parameters","text":"Argument Role lhs The first vector to compare rhs The second vector to compare N.B. lhs and rhs must be the exact same vector type, mixed type comparisons are not supported.","title":"Parameters"},{"location":"reference/vec/op_cmp.html#return-value","text":"1) true if both vectors are equal element-wise 2) true if any element at a given index differs between the vectors","title":"Return value"},{"location":"reference/vec/op_cmp.html#example","text":"#include \"vecpp/vecpp.h\" void foo() { constexpr vecpp::Vec<float, 2> a = {1.0f, 1.0f}; constexpr vecpp::Vec<float, 2> b = {1.0f, 1.0f}; constexpr vecpp::Vec<float, 2> c = {1.0f, 2.0f}; static_assert(a == b); static_assert(a != c); }","title":"Example"},{"location":"reference/vec/op_per_mem.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator+,-,*,/(vecpp::Vec) template<typename T, std::size_t L> constexpr Vec<T,L> operator+(const Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L> operator-(const Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L> operator*(const Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L> operator/(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs binary operations member-wise on two vectors. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Vector containing the member-wise result of the binary operation applied on each input vector. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = a + b; assert(c[0] == a[0] + b[0]); assert(c[1] == a[1] + b[1]); }","title":"Op per mem"},{"location":"reference/vec/op_per_mem.html#vecppoperator-vecppvec","text":"template<typename T, std::size_t L> constexpr Vec<T,L> operator+(const Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L> operator-(const Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L> operator*(const Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L> operator/(const Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs binary operations member-wise on two vectors.","title":"vecpp::operator+,-,*,/(vecpp::Vec)"},{"location":"reference/vec/op_per_mem.html#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/op_per_mem.html#return-value","text":"A Vector containing the member-wise result of the binary operation applied on each input vector.","title":"Return value"},{"location":"reference/vec/op_per_mem.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = a + b; assert(c[0] == a[0] + b[0]); assert(c[1] == a[1] + b[1]); }","title":"Example"},{"location":"reference/vec/op_per_mem_compound.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator+=,-=,*=,/=(vecpp::Vec) template<typename T, std::size_t L> constexpr Vec<T,L>& operator+=(Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L>& operator-=(Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L>& operator*=(Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L>& operator/=(Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs binary operations member-wise on two vectors, and updates the first with the result. Parameters Argument Role lhs The first vector to consume, and where the results are stored rhs The second vector to consume Return value A reference to lhs. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; a += b; assert(a[0] == 10.0f + 5.0f); assert(a[1] == 5.0f + 6.0f); }","title":"Op per mem compound"},{"location":"reference/vec/op_per_mem_compound.html#vecppoperator-vecppvec","text":"template<typename T, std::size_t L> constexpr Vec<T,L>& operator+=(Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L>& operator-=(Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L>& operator*=(Vec<T,L>& lhs, const Vec<T,L>& rhs); template<typename T, std::size_t L> constexpr Vec<T,L>& operator/=(Vec<T,L>& lhs, const Vec<T,L>& rhs); Performs binary operations member-wise on two vectors, and updates the first with the result.","title":"vecpp::operator+=,-=,*=,/=(vecpp::Vec)"},{"location":"reference/vec/op_per_mem_compound.html#parameters","text":"Argument Role lhs The first vector to consume, and where the results are stored rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/op_per_mem_compound.html#return-value","text":"A reference to lhs.","title":"Return value"},{"location":"reference/vec/op_per_mem_compound.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; a += b; assert(a[0] == 10.0f + 5.0f); assert(a[1] == 5.0f + 6.0f); }","title":"Example"},{"location":"reference/vec/operator_at.html","text":"vecpp :: Vec<typename, size_t> vecpp::Vec::operator[]() constexpr T& operator[](std::size_t i); constexpr const T& operator[](std::size_t i) const; Parameters Argument Role i index of the element to access. Return value A reference to the requested element. N.B. Bounds checking is still performed in debug builds as a safety mechanism, but this should not be relied upon. See also at[] : bounds-checked access.","title":"Operator at"},{"location":"reference/vec/operator_at.html#vecppvecoperator91","text":"constexpr T& operator[](std::size_t i); constexpr const T& operator[](std::size_t i) const;","title":"vecpp::Vec::operator[]()"},{"location":"reference/vec/operator_at.html#parameters","text":"Argument Role i index of the element to access.","title":"Parameters"},{"location":"reference/vec/operator_at.html#return-value","text":"A reference to the requested element.","title":"Return value"},{"location":"reference/vec/operator_at.html#nb","text":"Bounds checking is still performed in debug builds as a safety mechanism, but this should not be relied upon.","title":"N.B."},{"location":"reference/vec/operator_at.html#see-also","text":"at[] : bounds-checked access.","title":"See also"},{"location":"reference/vec/scaling.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator*,/(vecpp::Vec, T) 1) template<typename T, std::size_t L> constexpr Vec<T,L> operator*(const Vec<T,L>& vec, const T& scale); template<typename T, std::size_t L> constexpr Vec<T,L> operator*(const T& scale, const Vec<T,L>& vec); 2) template<typename T, std::size_t L> constexpr Vec<T,L> operator/(Vec<T,L>& vec, const T& scale); Computes a vector representing the passed vector scaled by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand Parameters Argument Role vec The vector to scale scale The scaling operand Return value A vector equivalent to vec with each of its members scaled by scale N.B. The implementation of the library may choose to use operator*(T, T) or operator*=(T&, T) interchangeably in order to implement this. If these two implementations are not consistent, then the result is undefined. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = a * 3.0f; assert(b[0] == 3.0f * 10.0f); assert(b[1] == 3.0f * 5.0f); }","title":"Scaling"},{"location":"reference/vec/scaling.html#vecppoperatorvecppvec-t","text":"1) template<typename T, std::size_t L> constexpr Vec<T,L> operator*(const Vec<T,L>& vec, const T& scale); template<typename T, std::size_t L> constexpr Vec<T,L> operator*(const T& scale, const Vec<T,L>& vec); 2) template<typename T, std::size_t L> constexpr Vec<T,L> operator/(Vec<T,L>& vec, const T& scale); Computes a vector representing the passed vector scaled by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand","title":"vecpp::operator*,/(vecpp::Vec, T)"},{"location":"reference/vec/scaling.html#parameters","text":"Argument Role vec The vector to scale scale The scaling operand","title":"Parameters"},{"location":"reference/vec/scaling.html#return-value","text":"A vector equivalent to vec with each of its members scaled by scale","title":"Return value"},{"location":"reference/vec/scaling.html#nb","text":"The implementation of the library may choose to use operator*(T, T) or operator*=(T&, T) interchangeably in order to implement this. If these two implementations are not consistent, then the result is undefined.","title":"N.B."},{"location":"reference/vec/scaling.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; fVec2 b = a * 3.0f; assert(b[0] == 3.0f * 10.0f); assert(b[1] == 3.0f * 5.0f); }","title":"Example"},{"location":"reference/vec/scaling_compound.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator*=,/=(vecpp::Vec, T) 1) template<typename T, std::size_t L> constexpr Vec<T,L>& operator*=(Vec<T,L>& lhs, const T& rhs); 2) template<typename T, std::size_t L> constexpr Vec<T,L>& operator/=(Vec<T,L>& lhs, const T& rhs); Scales each member of the vector by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand Parameters Argument Role lhs The vector to scale rhs The scaling operand Return value A reference to lhs. Example #include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; a *= 3.0f; assert(a[0] == 3.0f * 10.0f); assert(a[1] == 3.0f * 5.0f); }","title":"Scaling compound"},{"location":"reference/vec/scaling_compound.html#vecppoperatorvecppvec-t","text":"1) template<typename T, std::size_t L> constexpr Vec<T,L>& operator*=(Vec<T,L>& lhs, const T& rhs); 2) template<typename T, std::size_t L> constexpr Vec<T,L>& operator/=(Vec<T,L>& lhs, const T& rhs); Scales each member of the vector by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand","title":"vecpp::operator*=,/=(vecpp::Vec, T)"},{"location":"reference/vec/scaling_compound.html#parameters","text":"Argument Role lhs The vector to scale rhs The scaling operand","title":"Parameters"},{"location":"reference/vec/scaling_compound.html#return-value","text":"A reference to lhs.","title":"Return value"},{"location":"reference/vec/scaling_compound.html#example","text":"#include \"vecpp/vecpp.h\" #include <cassert> int main() { using fVec2 = vecpp::Vec<float, 2>; fVec2 a = {10.0f, 5.0f}; a *= 3.0f; assert(a[0] == 3.0f * 10.0f); assert(a[1] == 3.0f * 5.0f); }","title":"Example"},{"location":"reference/vec/unary_minus.html","text":"vecpp :: Vec<typename, size_t> vecpp::operator-(vecpp::Vec) unary template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator-(const Mat<T, C, R>& rhs); Returns the negated version of the matrix Parameters Argument Role rhs The matrix to negate Return value A matrix equivalent to rhs where operator-() has been applied to it element-wise.","title":"Unary minus"},{"location":"reference/vec/unary_minus.html#vecppoperator-vecppvecunary","text":"template<typename T, std::size_t C, std::size_t R> constexpr Mat<T, C, R> operator-(const Mat<T, C, R>& rhs); Returns the negated version of the matrix","title":"vecpp::operator-(vecpp::Vec)unary"},{"location":"reference/vec/unary_minus.html#parameters","text":"Argument Role rhs The matrix to negate","title":"Parameters"},{"location":"reference/vec/unary_minus.html#return-value","text":"A matrix equivalent to rhs where operator-() has been applied to it element-wise.","title":"Return value"},{"location":"user-guide/index.html","text":"","title":"Home"},{"location":"user-guide/constexpr.html","text":"Compile-time evaluation Almost every single thing you can do in vecpp, you can also do during compile time. For the most part , everything works transparently. You can just use any vecpp construct within a constant expression, this includes using Vec3 = vecpp::Vec<float, 3>; using Angle = vecpp::Angle<float>; constexpr Vec3 unit_x = {1.0f, 0.0f, 0.0f}; constexpr Vec3 unit_y = {0.0f, 1.0f, 0.0f}; constexpr Vec3 unit_z = {0.0f, 0.0f, 1.0f}; constexpr float x_dot_y = dot(unit_x, unit_y); constexpr Vec3 y_cross_z = dot(unit_y, unit_z); constexpr Angle rotation = Angle::from_deg(45.0f); We say \"for the most part\", because fully implementing vecpp in constexpr , while possible, would come at the cost of runtime performance. Specifically some operations, such as sqrt() have extremely fast hardware support available to them on some platforms, and implementing such operations as constexpr-friendly alternatives would lock our users out from them, which is unnaceptible. Unfortunately, it is currently impossible in standard C++ to write a function that has a compile-time switch for constexpr and non-constexpr implementations, so we have taken the following approach: If an operation's algorithm is identical between constexpr and non-constexpr versions, it will simply work. Otherwise, algorithm selection will be driven by a Flags template parameter that will always default to the fast runtime-algorithm. If you attempt to use a ct-branching algorithm to generate a constexpr value without foricing it into the constexpr -friendly path, you WILL get a compile error. constexpr workflow The user workflow is simple: Assume that everything transparently works as constexpr. If you encounter a compile error that says something along the lines of call to non-constexpr function... : wrap the offending parameters into a vecpp::ct() call. For example: using vecpp::ct; using Vec3 = vecpp::Vec<float, 3>; constexpr Vec3 my_vec = {1.0f, 4.0f, 0.0f}; //constexpr float my_vec_len = norm(my_vec); // Error, needs non-constexpr sqrt() constexpr float my_vec_len = norm(ct(my_vec)); // all clear Scalars Scalar operations use a slightly nicer APi: constexpr vecpp::Flags ctf = vecpp::flags::compile_time; constexpr sqrt_val = vecpp::sqrt<ctf>(16.0f); Now at this point, you are probably wondering: \"Why can't I use that nicer API\" with vectors? Wouldn;t the following be a lot nicer? // ****************** NOT REAL CODE ****************** // using Vec3 = vecpp::Vec<float, 3>; constexpr vecpp::Flags ctf = vecpp::flags::compile_time; constexpr Vec3 my_vec = {1.0f, 4.0f, 0.0f}; constexpr float my_vec_len = norm<ctf>(my_vec); // ****************** NOT REAL CODE ****************** // Well, yes, that would indeed be a lot nicer, and frankly easy to implement. The problem with that is that it cannot be applied to operators, which will become a massive pain once we start playing with matrices. And we want to avoid having multiple ways of doing the same thing. Exceptions Uninitialized values cannot be employed in constexpr contexts, whereas vecpp generalyy allows them at the user's discretion. That's it","title":"Compile-time evaluation"},{"location":"user-guide/constexpr.html#compile-time-evaluation","text":"Almost every single thing you can do in vecpp, you can also do during compile time. For the most part , everything works transparently. You can just use any vecpp construct within a constant expression, this includes using Vec3 = vecpp::Vec<float, 3>; using Angle = vecpp::Angle<float>; constexpr Vec3 unit_x = {1.0f, 0.0f, 0.0f}; constexpr Vec3 unit_y = {0.0f, 1.0f, 0.0f}; constexpr Vec3 unit_z = {0.0f, 0.0f, 1.0f}; constexpr float x_dot_y = dot(unit_x, unit_y); constexpr Vec3 y_cross_z = dot(unit_y, unit_z); constexpr Angle rotation = Angle::from_deg(45.0f); We say \"for the most part\", because fully implementing vecpp in constexpr , while possible, would come at the cost of runtime performance. Specifically some operations, such as sqrt() have extremely fast hardware support available to them on some platforms, and implementing such operations as constexpr-friendly alternatives would lock our users out from them, which is unnaceptible. Unfortunately, it is currently impossible in standard C++ to write a function that has a compile-time switch for constexpr and non-constexpr implementations, so we have taken the following approach: If an operation's algorithm is identical between constexpr and non-constexpr versions, it will simply work. Otherwise, algorithm selection will be driven by a Flags template parameter that will always default to the fast runtime-algorithm. If you attempt to use a ct-branching algorithm to generate a constexpr value without foricing it into the constexpr -friendly path, you WILL get a compile error.","title":"Compile-time evaluation"},{"location":"user-guide/constexpr.html#constexpr-workflow","text":"The user workflow is simple: Assume that everything transparently works as constexpr. If you encounter a compile error that says something along the lines of call to non-constexpr function... : wrap the offending parameters into a vecpp::ct() call. For example: using vecpp::ct; using Vec3 = vecpp::Vec<float, 3>; constexpr Vec3 my_vec = {1.0f, 4.0f, 0.0f}; //constexpr float my_vec_len = norm(my_vec); // Error, needs non-constexpr sqrt() constexpr float my_vec_len = norm(ct(my_vec)); // all clear","title":"constexpr workflow"},{"location":"user-guide/constexpr.html#scalars","text":"Scalar operations use a slightly nicer APi: constexpr vecpp::Flags ctf = vecpp::flags::compile_time; constexpr sqrt_val = vecpp::sqrt<ctf>(16.0f); Now at this point, you are probably wondering: \"Why can't I use that nicer API\" with vectors? Wouldn;t the following be a lot nicer? // ****************** NOT REAL CODE ****************** // using Vec3 = vecpp::Vec<float, 3>; constexpr vecpp::Flags ctf = vecpp::flags::compile_time; constexpr Vec3 my_vec = {1.0f, 4.0f, 0.0f}; constexpr float my_vec_len = norm<ctf>(my_vec); // ****************** NOT REAL CODE ****************** // Well, yes, that would indeed be a lot nicer, and frankly easy to implement. The problem with that is that it cannot be applied to operators, which will become a massive pain once we start playing with matrices. And we want to avoid having multiple ways of doing the same thing.","title":"Scalars"},{"location":"user-guide/constexpr.html#exceptions","text":"Uninitialized values cannot be employed in constexpr contexts, whereas vecpp generalyy allows them at the user's discretion. That's it","title":"Exceptions"},{"location":"user-guide/installation.html","text":"Installation VecPP is a header-only library, so all you need to do is make the contents of the include/ directory available to your compiler. CMake You can use CMake (3.9 or above) to compile the tests and install the library. Option What Requirements VECPP_BUILD_SINGLE_HEADER build vecpp_single.h python and git submodules fetched VECPP_BUILD_DOCS builds the html version of the documentation mkdocs VECPP_BUILD_TESTS builds the unit tests On Linux: mkdir bld cd bld cmake -DVECPP_BUILD_SINGLE_HEADER=ON -DCMAKE_INSTALL_PREFIX=insert/install/path/here .. make && make install","title":"Installation"},{"location":"user-guide/installation.html#installation","text":"VecPP is a header-only library, so all you need to do is make the contents of the include/ directory available to your compiler.","title":"Installation"},{"location":"user-guide/installation.html#cmake","text":"You can use CMake (3.9 or above) to compile the tests and install the library. Option What Requirements VECPP_BUILD_SINGLE_HEADER build vecpp_single.h python and git submodules fetched VECPP_BUILD_DOCS builds the html version of the documentation mkdocs VECPP_BUILD_TESTS builds the unit tests On Linux: mkdir bld cd bld cmake -DVECPP_BUILD_SINGLE_HEADER=ON -DCMAKE_INSTALL_PREFIX=insert/install/path/here .. make && make install","title":"CMake"},{"location":"user-guide/performance.html","text":"Performance This document details how to get the maximum oomph out of VecPP. Principles The compiler is smart By and large, VecPP relies on the compiler as much as possible. In fact, VecPP intentionally avoids using simd intrinsincs and assembly as much as possible, and lets the compiler figure things out for itself. Compiler flags SIMD Make sure you tell your compiler to use simd instructions. -mavx and the like will help a lot. Stack Protection -fstack-protector-strong can hurt VecPP performance a lot. Also, it is enabled by default on Ubuntu systems. Align structures When combined with SIMD, this has a major performance impact. struct My_vec_traits : public vecpp::Vec_Traits { enum { align = 32, }; }; using Vec4 = vecpp::Vec<float, 4, My_vec_traits>; constexpr as much as possible. For anything that is known at compile-time, constexpr will make a big difference (even over const ). constexpr Vec3 x = cross(up, right); Only use ct() to address constexpr compilation failures. ct() is not a \"go fast\" flag. It's a \"compiler-friendly\" flag.","title":"Performance"},{"location":"user-guide/performance.html#performance","text":"This document details how to get the maximum oomph out of VecPP.","title":"Performance"},{"location":"user-guide/performance.html#principles","text":"","title":"Principles"},{"location":"user-guide/performance.html#the-compiler-is-smart","text":"By and large, VecPP relies on the compiler as much as possible. In fact, VecPP intentionally avoids using simd intrinsincs and assembly as much as possible, and lets the compiler figure things out for itself.","title":"The compiler is smart"},{"location":"user-guide/performance.html#compiler-flags","text":"","title":"Compiler flags"},{"location":"user-guide/performance.html#simd","text":"Make sure you tell your compiler to use simd instructions. -mavx and the like will help a lot.","title":"SIMD"},{"location":"user-guide/performance.html#stack-protection","text":"-fstack-protector-strong can hurt VecPP performance a lot. Also, it is enabled by default on Ubuntu systems.","title":"Stack Protection"},{"location":"user-guide/performance.html#align-structures","text":"When combined with SIMD, this has a major performance impact. struct My_vec_traits : public vecpp::Vec_Traits { enum { align = 32, }; }; using Vec4 = vecpp::Vec<float, 4, My_vec_traits>;","title":"Align structures"},{"location":"user-guide/performance.html#constexpr-as-much-as-possible","text":"For anything that is known at compile-time, constexpr will make a big difference (even over const ). constexpr Vec3 x = cross(up, right);","title":"constexpr as much as possible."},{"location":"user-guide/performance.html#only-use-ct-to-address-constexpr-compilation-failures","text":"ct() is not a \"go fast\" flag. It's a \"compiler-friendly\" flag.","title":"Only use ct() to address constexpr compilation failures."}]}